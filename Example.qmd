---
title: "Bayesian Inference with a frugal parameterization"
author: "Gregor Steiner"
date: last-modified
editor: visual
theme: cosmo
toc: true  
number-sections: true
colorlinks: true
highlight-style: pygments
format:
  html: 
    code-fold: true
    code-tools: true
    html-math-method: katex
    self-contained: true
bibliography: references.bib
execute: 
  warning: false
  message: false
---

# Simulate Data

This notebook works through a simple example using the frugal parameterization proposed by @evans_didelez_2023 . First, we simulate data based on a simple model with an outcome $Y$, a binary treatment $X$, and a confounder $Z$. The setup is $$ Z \sim N(\mu_Z, \sigma_Z^2) \\
X | Z = z \sim Ber( \text{expit}(z)) \\
Y | \text{do}(X = x) \sim N(\alpha + \beta x, \sigma^2).$$

The dependence between $Y$ and $Z$ is modeled using a Gaussian copula with correlation parameter $\phi_{YZ|X}^* = 2 \text{expit}(\alpha_{\phi} + \beta_{\phi} X) - 1$. Thus, the frugal parameterization consists of $\theta_{ZX} = (\mu_Z, \sigma_Z)$, $\theta_{Y|X}^* = (\alpha, \beta, \sigma^2)$, and $\phi_{YZ|X}^* = (\alpha_\phi, \beta_\phi)$. The data is simulated with $\alpha = 0, \beta = 1$, $\sigma^2 = 1$, $\mu_Z = 1/2$, $\sigma_Z^2 = 4$, $\alpha_{\phi} = 0$, and $\beta_{\phi} = 1$.

```{r}
#devtools::install_github("rje42/causl")
library(causl)

forms <- list(Z ~ 1, 
              X ~ Z,
              Y ~ X, 
              ~ X)

pars <- list(Z = list(beta = 1/2, phi = 4),
             X = list(beta = c(0, 1)),
             Y = list(beta = c(0, 1), phi = 1),
             cop = list(beta = c(0, 1)))

set.seed(12)
n <- 50
dat <- rfrugalParam(n, formulas = forms, pars = pars, 
                    family = list(1, 5, 1, 1), careful = FALSE)


```

# Maximum Likelihood

We perform maximum likelihood estimation as described in @evans_didelez_2023 . The observational likelihood is given by \begin{align*}
    p_{ZXY}(z, x, y | \theta^*) &= p_{ZX}(z, x | \theta_{ZX}) p_{Y|ZX}^*(y|z, x; \theta_{Y|X}^*, \phi_{YZ | X}^*) \\
    &= p_{ZX}(z, x | \theta_{ZX}) p_{Y|X}^*(y | x; \theta_{Y|X}^*) c(y, z| x; \phi_{YZ | X}^*),
\end{align*} where $c(y, z| x; \phi_{YZ | X}^*)$ is a copula density. By substituting $p_{ZX}$ for the causal distribution $p_{ZX}^*$, where $Z$ and $X$ are independent, we obtain the causal likelihood. Now, we can maximise the causal likelihood w.r.t. the observational data to obtain an estimate for $\beta$. This is done below using the implementation by Robin Evans.

```{r}
fit <- fitCausal(dat, formulas = list(Y ~ X, Z ~ 1, ~ X),
                 family = c(1, 1, 1))
fit
```

The estimate is close to the true value of 1.

# Bayesian Approach

Here, we try a fully Bayesian approach using normal priors for the location parameters and exponential priors for the scale parameters. I implemented this model in STAN (see the STAN file for more details).

```{r}
library(rstan)
options(mc.cores = parallel::detectCores())
library(bayesplot)

fit = stan("example.stan", data = list(
  "N" = nrow(dat),
  "Y" = dat$Y,
  "X" = dat$X,
  "Z" = dat$Z
), iter = 5e3, warmup = 1e3)


mcmc_hist(fit)

```

# Different choices of $\eta$

Above, we implicitly used $p_{ZX} = p_Z \cdot p_{X|Z}$ and parameterized this by $\theta_{ZX} = (\mu_Z, \sigma_Z)$. What happens if one uses a different parameterization of $p_{ZX}$, e.g. we could use $\eta(\theta_{ZX}) = (\eta_1, \eta_2) = (\mu_Z / \sigma_Z, 1 / \sigma_Z^2)$? In this parameterization, one has $Z \sim N(\eta_1 / \sqrt{\eta_2}, 1/\sqrt{\eta_2})$ and we put a normal prior on $\eta_1$ and an exponential prior on $\eta_2$.

```{r}
fit_eta = stan("example_eta.stan", data = list(
  "N" = nrow(dat),
  "Y" = dat$Y,
  "X" = dat$X,
  "Z" = dat$Z
), iter = 5e3, warmup = 1e3)



mcmc_hist(fit_eta)

```

# Simulation

Now we will investigate the difference between these two parameterisations in a more systematic way. We will generate 100 datasets from the data generating process above with sample sizes $n \in \{50, 1000\}$ and compare the MLEs and posterior medians for $\beta$, the causal parameters of interest.

```{r}
# function that computes posterior medians and MLEs
comp = function(data, iter = 1e3){
  # compute MLE
  fit.ml = fitCausal(data,
                     formulas = list(Y ~ X, Z ~ 1, ~ X),
                     family = c(1, 1, 1))
  MLE = c(fit.ml$pars$Y$beta |> setNames(c("alpha", "beta")),
          fit.ml$pars$cop$beta |> setNames(c("alpha_phi", "beta_phi")))
  
  # posterior median for standard parameterisation
  fit = stan("example.stan", data = list(
    "N" = nrow(data),
    "Y" = data$Y,
    "X" = data$X,
    "Z" = data$Z
  ), iter = iter)
  MedStd = summary(fit)$summary[c("alpha", "beta", "alpha_phi", "beta_phi"), "50%"]
  
  # posterior median for alternative parameterisation
  fit_eta = stan("example_eta.stan", data = list(
    "N" = nrow(data),
    "Y" = data$Y,
    "X" = data$X,
    "Z" = data$Z
  ), iter = iter)
  MedAlt = summary(fit_eta)$summary[c("alpha", "beta", "alpha_phi", "beta_phi"), "50%"]
  
  # return
  return(cbind(
    "MLE" = MLE,
    "MedStd" = MedStd,
    "MedAlt" = MedAlt
    ))
  
}

```



```{r}
# run simulation
ns = c(50, 1000, 10000)
m = 100
# storeList = lapply(ns, function(n){
# 
#   store = lapply(1:m, function(i){
#     # simulate dataset
#     data = rfrugalParam(n, formulas = forms, pars = pars,
#                         family = list(1, 5, 1, 1), careful = FALSE)
# 
#     # compute MLE and posterior medians and store
#     res = comp(data)
#     return(res)
# 
#   })
# 
#   return(store)
# 
# }) |> setNames(ns)
# 
# saveRDS(storeList, "SimResults.RDS")


```

```{r}
# load data
storeList = readRDS("SimResults.RDS")

# transform into ggplot format
datPlot = Map(function(store, n){
  
  resList = lapply(store, function(mat){
    
    dat = tidyr::pivot_longer(data.frame("par" = rownames(mat), mat), cols = -1)
    return(dat)
    
  })
  
  res = do.call(rbind, resList)
  res$n = n
  return(res)
  
}, storeList, ns) |> do.call(rbind, args = _)

# some cosmetics
datPlot$name = factor(datPlot$name, levels = unique(datPlot$name))
levels(datPlot$name) = c("MLE", "Std. Par.", "Alt. Par.")
datPlot$n = paste0("n = ", datPlot$n)
datPlot$n = factor(datPlot$n, levels = paste0("n = ", c(50, 1000, 10000)))

```


```{r fig.height=10, fig.width=10}
#| fig-cap: "MLE and posterior medians for the standard parameterisation (Std. Par.) and alternative parameterisation (Alt. Par.)"
library(ggplot2)

ggplot(datPlot, aes(x = name, y = value, fill = par)) +
  geom_jitter() +
  geom_boxplot(alpha = 0.8) +
  facet_grid(par ~ n, scales = "free") +
  theme_bw() +
  theme(legend.position="none") +
  labs(x = "", y = "")

ggsave("SimResults.pdf")

```






